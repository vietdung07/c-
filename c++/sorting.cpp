#include <iostream>
#include <typeinfo>
#include <ctime>
using namespace std;
namespace temp
{
    int Qpart(int arr[], const int begin, const int end)
    {
        int i = begin, j = end;
        const int mid = (begin + end) / 2;
        int pivot = mid;
        {
            int max = begin, min = begin;
            if (arr[max] < arr[mid])
                max = mid;
            if (arr[max] < arr[end])
                max = end;
            if (arr[min] > arr[mid])
                min = mid;
            if (arr[min] > arr[end])
                min = end;
            if (arr[end] < arr[max] && arr[end] > arr[min])
                pivot = end;
            else if (arr[begin] < arr[max] && arr[begin] > arr[min])
                pivot = begin;
        }
        while (i != pivot || j != pivot)
        {
            if (arr[i] <= arr[pivot] && i < pivot)
                i++;
            if (arr[j] >= arr[pivot] && j > pivot)
                j--;
            if (arr[i] >= arr[pivot] && arr[pivot] >= arr[j])
            {
                swap(arr[i], arr[j]);
                if (i == pivot)
                    pivot = j;
                else if (j == pivot)
                    pivot = i;
            }
        }
        return pivot;
    }
    void merge(int arr[], int begin, int mid, int end)
    {
        const int size1 = mid - begin + 1;
        const int size2 = end - mid;
        int *arr1 = new int[size1];
        int *arr2 = new int[size2];
        for (int i = 0; i < size1; i++)
            arr1[i] = arr[begin + i];
        for (int i = 0; i < size2; i++)
            arr2[i] = arr[mid + 1 + i];
        int index_1 = 0, index_2 = 0;
        int index = begin;
        while (index_1 < size1 && index_2 < size2)
        {
            if (arr1[index_1] < arr2[index_2])
            {
                arr[index] = arr1[index_1];
                index_1++;
            }
            else
            {
                arr[index] = arr2[index_2];
                index_2++;
            }
            index++;
        }
        while (index_1 < size1)
        {
            arr[index] = arr1[index_1];
            index++;
            index_1++;
        }
        while (index_2 < size2)
        {
            arr[index] = arr2[index_2];
            index++;
            index_2++;
        }
        delete[] arr1;
        delete[] arr2;
    }
} // namespace temp
namespace sorting
{
    void Quick_sort(int arr[], int begin, int end)
    {
        if (begin >= end)
            return;
        int pivot = temp::Qpart(arr, begin, end);
        Quick_sort(arr, begin, pivot - 1);
        Quick_sort(arr, pivot + 1, end);
    }
    void Merge_sort(int arr[], int begin, int end)
    {
        if (begin >= end)
            return;
        int mid = (begin + end) / 2;
        Merge_sort(arr, begin, mid);
        Merge_sort(arr, mid + 1, end);
        temp::merge(arr, begin, mid, end);
    }
    void Bubble_sort(int arr[], int size)
    {
        for (int i = 0; i < size; i++)
            for (int j = 0; j < size - 1; j++)
                if (arr[j] > arr[j + 1])
                    swap(arr[j], arr[j + 1]);
    }
    void Selection_sort(int arr[], int size)
    {
        for (int i = 0; i < size; i++)
        {
            int min = i;
            for (int j = i + 1; j < size; j++)
                if (arr[j] < arr[min])
                    min = j;
            swap(arr[i], arr[min]);
        }
    }
    void Insertion_sort(int arr[], int size)
    {
        for (int i = 0; i < size; i++)
        {
            int t = 0;
            for (; t < i; t++)
                if (arr[t] > arr[i])
                    break;
            if (t < i)
            {
                int temp = arr[i];
                for (int j = i - 1; j >= t; j--)
                    arr[j + 1] = arr[j];
                arr[t] = temp;
            }
        }
    }
}
void printArr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << ' ';
}

// 36,15,26,87,65,99,98,19,18,11,65,56,28
// 12,59,67,79,25,80,71,57,18,19,93,81,47
// 66,61,62,100,64,40,97,37,1,22,65,18,12
// 88,18,100,92,98,49,30,72,93,94,97,12,49
#include <vector>
using namespace std;
int main()
{

    int a[] = {3770, 1000, 1000, 1000, 999, 999, 999, 999, 998, 998, 997, 996, 996, 992, 992, 990, 989, 987, 983, 980, 978, 977, 975, 972, 971, 971, 971, 970, 969, 969, 967, 967, 967, 966, 965, 965, 963, 961, 961, 961, 961, 958, 958, 957, 957, 957, 954, 954, 952, 951, 951, 948, 948, 945, 945, 944, 943, 942, 939, 938, 938, 938, 938, 934, 933, 930, 929, 929, 929, 928, 928, 928, 927, 927, 926, 922, 921, 921, 921, 921, 916, 916, 916, 916, 915, 913, 913, 913, 912, 909, 908, 908, 908, 908, 907, 906, 906, 905, 905, 905, 903, 903, 902, 901, 901, 900, 899, 899, 898, 898, 896, 896, 895, 894, 894, 894, 892, 890, 890, 889, 888, 887, 887, 887, 886, 886, 886, 885, 885, 885, 881, 881, 878, 878, 877, 877, 875, 875, 875, 874, 874, 874, 872, 869, 867, 866, 866, 864, 863, 863, 863, 863, 859, 859, 859, 858, 858, 857, 857, 857, 856, 856, 856, 855, 855, 854, 853, 851, 850, 849, 846, 846, 846, 846, 845, 845, 845, 845, 843, 841, 841, 839, 839, 839, 837, 834, 832, 832, 832, 830, 830, 829, 828, 827, 826, 824, 824, 823, 823, 823, 818, 818, 817, 817, 815, 815, 813, 812, 812, 812, 810, 810, 805, 805, 804, 803, 802, 802, 802, 802, 802, 802, 801, 801, 801, 799, 797, 796, 796, 795, 795, 793, 793, 793, 792, 792, 791, 791, 787, 786, 786, 786, 785, 785, 784, 782, 782, 781, 778, 777, 774, 774, 774, 773, 771, 769, 767, 763, 763, 763, 762, 761, 760, 760, 759, 759, 758, 758, 757, 752, 752, 752, 752, 751, 750, 750, 749, 748, 746, 745, 745, 743, 742, 741, 737, 737, 737, 737, 736, 736, 735, 735, 733, 733, 731, 731, 730, 730, 727, 726, 725, 725, 724, 724, 724, 723, 721, 720, 720, 718, 716, 716, 715, 713, 712, 709, 709, 709, 708, 707, 707, 706, 702, 701, 701, 701, 701, 701, 700, 699, 699, 698, 698, 698, 698, 697, 697, 696, 695, 694, 693, 692, 692, 691, 691, 691, 690, 689, 689, 687, 686, 686, 685, 685, 679, 679, 678, 678, 675, 675, 673, 672, 670, 669, 669, 668, 664, 663, 663, 661, 661, 661, 661, 660, 660, 659, 659, 658, 658, 657, 656, 656, 654, 654, 653, 651, 650, 648, 647, 647, 647, 645, 645, 645, 644, 644, 643, 640, 639, 639, 639, 639, 639, 638, 638, 638, 637, 637, 636, 634, 634, 633, 633, 631, 629, 628, 628, 624, 623, 623, 623, 623, 622, 622, 620, 620, 619, 617, 615, 615, 613, 613, 612, 612, 612, 610, 610, 609, 609, 609, 608, 608, 608, 605, 604, 603, 603, 603, 603, 600, 598, 598, 597, 596, 596, 596, 596, 596, 593, 592, 590, 590, 589, 589, 589, 588, 587, 587, 586, 584, 583, 580, 578, 578, 578, 577, 577, 576, 574, 574, 573, 573, 573, 573, 572, 572, 570, 570, 567, 567, 566, 565, 565, 561, 560, 560, 559, 559, 558, 558, 557, 554, 554, 553, 552, 552, 552, 551, 550, 547, 546, 546, 546, 544, 544, 543, 542, 542, 542, 541, 541, 539, 539, 538, 538, 538, 538, 537, 536, 536, 535, 533, 533, 532, 532, 532, 531, 529, 529, 528, 528, 527, 525, 525, 524, 524, 524, 523, 523, 522, 522, 521, 518, 516, 516, 516, 512, 512, 511, 511, 511, 510, 510, 510, 508, 507, 504, 504, 504, 502, 501, 501, 500, 500, 500, 498, 496, 496, 495, 492, 491, 491, 490, 490, 489, 489, 484, 483, 479, 479, 475, 474, 474, 474, 473, 472, 471, 471, 470, 470, 469, 469, 464, 463, 463, 462, 460, 459, 458, 458, 458, 456, 456, 455, 455, 455, 454, 454, 454, 453, 453, 453, 452, 452, 450, 450, 449, 447, 446, 445, 444, 443, 442, 442, 442, 442, 442, 441, 438, 438, 437, 435, 434, 434, 434, 432, 431, 430, 429, 427, 424, 423, 423, 420, 420, 418, 418, 416, 415, 415, 415, 411, 410, 410, 409, 406, 404, 404, 404, 403, 400, 400, 400, 398, 397, 396, 396, 395, 395, 395, 395, 394, 394, 389, 389, 389, 389, 389, 388, 388, 387, 387, 387, 386, 385, 385, 384, 384, 384, 381, 381, 379, 377, 376, 374, 374, 374, 372, 372, 370, 370, 370, 370, 370, 370, 367, 366, 366, 366, 362, 360, 358, 358, 358, 358, 356, 352, 352, 352, 352, 351, 351, 348, 348, 347, 346, 344, 344, 344, 343, 341, 340, 339, 337, 337, 337, 336, 335, 335, 335, 335, 333, 333, 331, 331, 331, 329, 328, 328, 328, 328, 328, 327, 327, 327, 326, 325, 325, 325, 325, 324, 321, 321, 321, 321, 318, 318, 317, 314, 314, 311, 311, 306, 305, 305, 305, 305, 303, 302, 302, 302, 301, 301, 300, 299, 299, 298, 298, 296, 296, 294, 292, 289, 289, 288, 288, 287, 286, 286, 286, 286, 286, 283, 282, 281, 281, 280, 280, 274, 274, 274, 274, 274, 274, 274, 274, 273, 273, 273, 270, 269, 269, 269, 266, 266, 266, 266, 266, 266, 266, 266, 266, 264, 261, 260, 260, 260, 259, 257, 255, 255, 253, 253, 252, 249, 249, 249, 248, 248, 248, 247, 245, 245, 244, 243, 243, 243, 243, 241, 239, 239, 238, 238, 238, 236, 236, 234, 234, 230, 230, 229, 228, 228, 224, 224, 223, 223, 218, 218, 217, 216, 216, 216, 216, 215, 215, 212, 212, 210, 205, 205, 204, 204, 204, 202, 198, 198, 195, 195, 194, 193, 193, 192, 192, 190, 190, 190, 188, 187, 184, 184, 183, 182, 182, 181, 181, 179, 178, 178, 178, 178, 178, 178, 174, 174, 172, 171, 170, 170, 170, 169, 169, 169, 168, 167, 167, 163, 163, 163, 163, 162, 162, 162, 161, 161, 161, 161, 161, 159, 159, 159, 159, 159, 158, 158, 156, 155, 154, 154, 154, 154, 153, 153, 153, 151, 151, 148, 147, 147, 146, 146, 144, 140, 140, 140, 137, 136, 135, 135, 134, 134, 133, 133, 133, 133, 129, 128, 127, 127, 124, 124, 122, 121, 121, 121, 120, 119, 119, 119, 115, 114, 114, 114, 113, 113, 112, 112, 112, 108, 108, 107, 107, 107, 105, 105, 101, 101, 101, 100, 100, 100, 99, 99, 97, 92, 92, 90, 87, 86, 83, 83, 83, 83, 83, 83, 81, 81, 80, 80, 80, 80, 80, 79, 79, 79, 79, 78, 78, 77, 74, 74, 73, 73, 73, 70, 70, 70, 70, 70, 70, 69, 69, 69, 68, 68, 68, 67, 65, 65, 65, 65, 64, 64, 64, 64, 62, 62, 60, 59, 58, 55, 55, 52, 52, 51, 50, 47, 47, 47, 47, 46, 46, 45, 43, 43, 43, 43, 43, 42, 42, 42, 40, 38, 38, 36, 34, 34, 34, 31, 31, 31, 31, 31, 30, 30, 26, 25, 25, 23, 23, 20, 18, 18, 18, 18, 17, 17, 13, 13, 13, 12, 11, 11, 9, 8, 7, 4, 4, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1};
    clock_t start = clock(), end;
    // sorting::Quick_sort(a, 0, sizeof(a) / sizeof(a[0]) - 1);
    // sorting::Merge_sort(a, 0, sizeof(a) / sizeof(a[0]) - 1);
    // sorting::Bubble_sort(a, sizeof(a) / sizeof(a[0]));
    // sorting::Selection_sort(a, sizeof(a) / sizeof(a[0]));
    sorting::Insertion_sort(a, sizeof(a) / sizeof(a[0]));
    // printArr(a, 233);
    end = clock();
    std::cout << (double)(end - start) / 1000 << '\n';
    return 0;
}